def run_instances(instances=[{(2, 6): 0.5160852615777896, (13, 13): 0.9319646681708734, (6, 6): 0.8606380663808766, (1, 6): 0.0, (12, 12): 0.6513698529343085, (7, 7): 0.16563375072880127, (0, 7): 0.0, (5, 13): 0.0, (4, 12): 0.7338340760527127, (0, 5): 0.23660222273755804, (1, 4): 0.7323245483844127, (128, 128): 0.045783443174777894, (2, 4): 0.0, (3, 7): 0.9038168616058962, (2, 5): 0.0, (14, 14): 0.487573139345321, (6, 14): 0.0, (2, 7): 0.9426353078362628, (7, 15): 0.6455592536238158, (0, 128): 0.7406443781286747, (129, 129): 0.7132101466390699, (131, 131): 0.9854602920895158, (1, 5): 0.25902842868967213, (5, 5): 0.4570409226555594, (1, 7): 0.24653882575442454, (4, 4): 0.6055189513596845, (3, 131): 0.0, (0, 0): 0.16268264406083688, (15, 15): 0.009710795948105533, (0, 6): 0.12062024006460492, (3, 3): 0.9640744750887139, (3, 6): 0.15441807354502235, (2, 2): 0.5217999096926298, (0, 4): 0.7663816443072197, (2, 130): 0.0, (3, 5): 0.0, (3, 4): 0.0, (130, 130): 0.7916268753073616, (1, 129): 0.7862934888901292, (1, 1): 0.316204105625695}, {(11, 139): 0.0, (8, 13): 0.23660222273755804, (13, 13): 0.4570409226555594, (9, 9): 0.316204105625695, (6, 6): 0.8606380663808766, (12, 12): 0.6055189513596845, (10, 12): 0.0, (7, 7): 0.16563375072880127, (0, 7): 0.0, (137, 137): 0.7132101466390699, (10, 15): 0.9426353078362628, (15, 23): 0.6455592536238158, (4, 12): 0.7338340760527127, (1, 6): 0.0, (128, 128): 0.045783443174777894, (11, 13): 0.0, (3, 7): 0.9038168616058962, (2, 5): 0.0, (14, 22): 0.0, (13, 21): 0.0, (21, 21): 0.9319646681708734, (8, 14): 0.12062024006460492, (0, 128): 0.7406443781286747, (12, 20): 0.7338340760527127, (7, 15): 0.6455592536238158, (9, 15): 0.24653882575442454, (4, 4): 0.6055189513596845, (3, 131): 0.0, (0, 0): 0.16268264406083688, (8, 8): 0.16268264406083688, (20, 20): 0.6513698529343085, (1, 5): 0.25902842868967213, (136, 136): 0.045783443174777894, (3, 6): 0.15441807354502235, (14, 14): 0.8606380663808766, (3, 3): 0.9640744750887139, (6, 14): 0.0, (129, 129): 0.7132101466390699, (8, 15): 0.0, (1, 1): 0.316204105625695, (8, 136): 0.7406443781286747, (11, 14): 0.15441807354502235, (2, 6): 0.5160852615777896, (9, 14): 0.0, (22, 22): 0.487573139345321, (10, 13): 0.0, (2, 2): 0.5217999096926298, (5, 5): 0.4570409226555594, (1, 4): 0.7323245483844127, (5, 13): 0.0, (130, 130): 0.7916268753073616, (9, 137): 0.7862934888901292, (3, 5): 0.0, (0, 5): 0.23660222273755804, (11, 15): 0.9038168616058962, (0, 4): 0.7663816443072197, (8, 12): 0.7663816443072197, (11, 12): 0.0, (131, 131): 0.9854602920895158, (2, 7): 0.9426353078362628, (9, 13): 0.25902842868967213, (1, 129): 0.7862934888901292, (10, 10): 0.5217999096926298, (11, 11): 0.9640744750887139, (23, 23): 0.009710795948105533, (15, 15): 0.16563375072880127, (0, 6): 0.12062024006460492, (138, 138): 0.7916268753073616, (10, 14): 0.5160852615777896, (139, 139): 0.9854602920895158, (1, 7): 0.24653882575442454, (2, 130): 0.0, (10, 138): 0.0, (3, 4): 0.0, (2, 4): 0.0, (9, 12): 0.7323245483844127}, {(132, 132): 0.6055189513596845, (13, 13): 0.9319646681708734, (6, 6): 0.8606380663808766, (259, 259): 0.9854602920895158, (12, 12): 0.6513698529343085, (7, 7): 0.16563375072880127, (0, 7): 0.0, (130, 134): 0.5160852615777896, (1, 6): 0.0, (142, 142): 0.487573139345321, (128, 128): 0.16268264406083688, (131, 135): 0.9038168616058962, (3, 7): 0.9038168616058962, (2, 5): 0.0, (130, 133): 0.0, (6, 14): 0.0, (135, 135): 0.16563375072880127, (143, 143): 0.009710795948105533, (0, 128): 0.7406443781286747, (7, 15): 0.6455592536238158, (129, 133): 0.25902842868967213, (128, 134): 0.12062024006460492, (4, 4): 0.6055189513596845, (130, 135): 0.9426353078362628, (3, 131): 0.0, (0, 0): 0.16268264406083688, (1, 5): 0.25902842868967213, (129, 135): 0.24653882575442454, (131, 259): 0.0, (3, 6): 0.15441807354502235, (14, 14): 0.487573139345321, (3, 3): 0.9640744750887139, (129, 257): 0.7862934888901292, (3, 5): 0.0, (134, 142): 0.0, (129, 129): 0.316204105625695, (129, 134): 0.0, (1, 1): 0.316204105625695, (128, 132): 0.7663816443072197, (2, 6): 0.5160852615777896, (131, 134): 0.15441807354502235, (256, 256): 0.045783443174777894, (135, 143): 0.6455592536238158, (2, 2): 0.5217999096926298, (128, 133): 0.23660222273755804, (5, 5): 0.4570409226555594, (1, 4): 0.7323245483844127, (5, 13): 0.0, (130, 130): 0.5217999096926298, (0, 5): 0.23660222273755804, (128, 135): 0.0, (258, 258): 0.7916268753073616, (133, 133): 0.4570409226555594, (0, 4): 0.7663816443072197, (131, 131): 0.9640744750887139, (2, 7): 0.9426353078362628, (130, 258): 0.0, (1, 129): 0.7862934888901292, (140, 140): 0.6513698529343085, (131, 132): 0.0, (132, 140): 0.7338340760527127, (257, 257): 0.7132101466390699, (130, 132): 0.0, (15, 15): 0.009710795948105533, (141, 141): 0.9319646681708734, (0, 6): 0.12062024006460492, (128, 256): 0.7406443781286747, (4, 12): 0.7338340760527127, (133, 141): 0.0, (131, 133): 0.0, (1, 7): 0.24653882575442454, (134, 134): 0.8606380663808766, (2, 130): 0.0, (3, 4): 0.0, (2, 4): 0.0, (129, 132): 0.7323245483844127}, {(139, 267): 0.0, (132, 132): 0.6055189513596845, (8, 13): 0.23660222273755804, (11, 11): 0.9640744750887139, (259, 259): 0.9854602920895158, (12, 12): 0.6055189513596845, (133, 141): 0.0, (0, 7): 0.0, (266, 266): 0.7916268753073616, (10, 15): 0.9426353078362628, (143, 143): 0.16563375072880127, (1, 6): 0.0, (142, 142): 0.8606380663808766, (11, 14): 0.15441807354502235, (150, 150): 0.487573139345321, (3, 7): 0.9038168616058962, (2, 5): 0.0, (133, 133): 0.4570409226555594, (13, 13): 0.4570409226555594, (149, 149): 0.9319646681708734, (131, 131): 0.9640744750887139, (12, 20): 0.7338340760527127, (138, 142): 0.5160852615777896, (3, 131): 0.0, (139, 140): 0.0, (129, 133): 0.25902842868967213, (137, 140): 0.7323245483844127, (138, 140): 0.0, (139, 142): 0.15441807354502235, (134, 134): 0.8606380663808766, (0, 0): 0.16268264406083688, (136, 141): 0.23660222273755804, (129, 134): 0.0, (131, 259): 0.0, (131, 133): 0.0, (128, 132): 0.7663816443072197, (3, 3): 0.9640744750887139, (3, 5): 0.0, (129, 129): 0.316204105625695, (8, 15): 0.0, (11, 13): 0.0, (130, 135): 0.9426353078362628, (2, 6): 0.5160852615777896, (130, 134): 0.5160852615777896, (9, 14): 0.0, (131, 134): 0.15441807354502235, (136, 264): 0.7406443781286747, (135, 143): 0.6455592536238158, (10, 13): 0.0, (2, 2): 0.5217999096926298, (5, 5): 0.4570409226555594, (1, 4): 0.7323245483844127, (135, 135): 0.16563375072880127, (21, 21): 0.9319646681708734, (138, 138): 0.5217999096926298, (128, 135): 0.0, (258, 258): 0.7916268753073616, (128, 134): 0.12062024006460492, (0, 4): 0.7663816443072197, (137, 141): 0.25902842868967213, (267, 267): 0.9854602920895158, (138, 143): 0.9426353078362628, (8, 12): 0.7663816443072197, (10, 10): 0.5217999096926298, (142, 150): 0.0, (9, 9): 0.316204105625695, (1, 1): 0.316204105625695, (141, 141): 0.4570409226555594, (0, 6): 0.12062024006460492, (128, 256): 0.7406443781286747, (8, 136): 0.7406443781286747, (139, 139): 0.9640744750887139, (136, 143): 0.0, (1, 7): 0.24653882575442454, (11, 15): 0.9038168616058962, (257, 257): 0.7132101466390699, (139, 141): 0.0, (3, 4): 0.0, (2, 4): 0.0, (9, 12): 0.7323245483844127, (265, 265): 0.7132101466390699, (137, 265): 0.7862934888901292, (11, 139): 0.0, (6, 6): 0.8606380663808766, (7, 7): 0.16563375072880127, (137, 137): 0.316204105625695, (4, 12): 0.7338340760527127, (131, 135): 0.9038168616058962, (148, 148): 0.6513698529343085, (137, 142): 0.0, (13, 21): 0.0, (10, 14): 0.5160852615777896, (14, 22): 0.0, (8, 14): 0.12062024006460492, (0, 128): 0.7406443781286747, (151, 151): 0.009710795948105533, (5, 13): 0.0, (15, 23): 0.6455592536238158, (9, 15): 0.24653882575442454, (4, 4): 0.6055189513596845, (10, 12): 0.0, (141, 149): 0.0, (20, 20): 0.6513698529343085, (1, 5): 0.25902842868967213, (130, 133): 0.0, (136, 136): 0.16268264406083688, (138, 141): 0.0, (3, 6): 0.15441807354502235, (14, 14): 0.8606380663808766, (15, 15): 0.16563375072880127, (6, 14): 0.0, (134, 142): 0.0, (1, 129): 0.7862934888901292, (129, 257): 0.7862934888901292, (23, 23): 0.009710795948105533, (128, 128): 0.16268264406083688, (136, 142): 0.12062024006460492, (129, 135): 0.24653882575442454, (128, 133): 0.23660222273755804, (256, 256): 0.045783443174777894, (264, 264): 0.045783443174777894, (130, 130): 0.5217999096926298, (136, 140): 0.7663816443072197, (140, 148): 0.7338340760527127, (0, 5): 0.23660222273755804, (129, 132): 0.7323245483844127, (139, 143): 0.9038168616058962, (11, 12): 0.0, (7, 15): 0.6455592536238158, (2, 7): 0.9426353078362628, (9, 13): 0.25902842868967213, (138, 266): 0.0, (143, 151): 0.6455592536238158, (22, 22): 0.487573139345321, (140, 140): 0.6055189513596845, (131, 132): 0.0, (137, 143): 0.24653882575442454, (132, 140): 0.7338340760527127, (9, 137): 0.7862934888901292, (130, 132): 0.0, (8, 8): 0.16268264406083688, (130, 258): 0.0, (2, 130): 0.0, (10, 138): 0.0}], settings={'sa':True,'dwave':True,'dwave_params':{'num_reads':1000},'sa_params':{}}, verbose=False, plot=False):
    """
    Given an input problem instance, run_instances runs and returns all of the 
    statistics from the various solvers.
    
    Parameters:
    -----------
    instances: a dictionary containing all of the information necessary to fully
              specify the problem instance OR a list of dictionaries containing
              all of the information necessary to fully specify several problem
              instances
    settings: a dictionary used to configure the solvers (see below)
    verbose: boolean (optional) if True, more solution details are printed to the
             screen and returned in the result
    plot: boolean (optional) only makes sense to use this when the instances 
          variable contains a list of one problem's instances of increasing size.
          Plots TTS vs problem size.
              
    Returns:
    --------
    result: a dictionary with indexed keys containing solution information. The
            keys/values change if verbose is set to True (see below)
    """
    # Import solvers
    from simulated_annealing.send_to_SA import SA
    from dwave_interface.Problem_Post import post_problem
    from numpy import log
    
    # Initialize output
    result = {}
    
    # Run (only) selected solvers
    
    # Accomodate multiple inputs
    if type(instances) == dict:
        instances = [instances]
        
    for count, instance in enumerate(instances):
        # Run on D-Wave
        if settings['dwave']:
            dwave = post_problem(instance, params=settings['dwave_params'])
            
            if verbose:
                print("D-Wave Solution: ", end="\n\n")
                for i in range(len(dwave["answer"]["energies"])):
                    print(dwave["answer"]["energies"][i], "\t", dwave["answer"]["num_occurrences"][i],
                          "\t", dwave["answer"]["num_occurrences"][i]/settings["dwave_params"]["num_reads"])
                print("\n")
                
                result['dwave_'+str(count)] = {'anneal_time_per_run':dwave['answer']['timing']['anneal_time_per_run'],
                "ps":dwave["answer"]["num_occurrences"][0]/settings["dwave_params"]["num_reads"],
                "energy":dwave['answer']['energies'][0],
                "ts":dwave['answer']['timing']['anneal_time_per_run']*log(0.01)/log(1-dwave["answer"]["num_occurrences"][0]/settings["dwave_params"]["num_reads"])}
                
            else:
                result['dwave_TTS_'+str(count)] = dwave['answer']['timing']['anneal_time_per_run']*log(0.01)/log(1-dwave["answer"]["num_occurrences"][0]/settings["dwave_params"]["num_reads"])
                
        # Run Simulated Annealing
        if settings["sa"]:
            # Data first needs to be saved before run
            from os import path, walk, remove
            dir_path = path.dirname(path.realpath(__file__))
            
            # Write instance data into a file in the same directory as this script
            instance_file = open("temp_file.txt", "w")
            instance_file.write("This file is written automatically for the purposes "+
            "of evaluation by the Simulated Annealing algorithm and is safe to delete.\n")
            for key in instance:
                for value in key:
                    instance_file.write(str(value)+" ")
                instance_file.write(str(instance[key])+"\n")
            instance_file.close()
            
            # Locate the solver directory (by finding solver "an_ms_r1_fi.h")
            for root, dirs, files in walk(dir_path):
                if "an_ms_r1_fi.h" in files:
                     solver_path = path.join(root)
                    
            # Run simulated annealer
            if verbose:
                sa = SA(dir_path, "temp_file.txt", verbose=True, solverDir=solver_path, solver="an_ss_ge_fi_vdeg")
                result['sa_'+str(count)] = {"energy":sa[0],"S":sa[1],"ps":sa[2],"ts":float(sa[1])*log(0.01)/log(1-float(sa[2]))}
            else:
                sa = SA(dir_path, "temp_file.txt", verbose=False, solverDir=solver_path, solver="an_ss_ge_fi_vdeg")
                result['sa_TTS_'+str(count)] = float(sa[1])*log(0.01)/log(1-float(sa[2]))
                
            # Delete instance data file
            remove("temp_file.txt")
            
    if plot:
        import matplotlib.pyplot as plt
        x_sa = []
        x_dwave = []
        ys = []
        for i in range(count+1):
            x_sa.append(result["sa_TTS_"+str(i)])
            x_dwave.append(result["dwave_TTS_"+str(i)])
        for instance in instances:
            j = 0
            for key in instance.keys():
                if tuple(key)[0] == tuple(key)[1]:
                    j += 1
            ys.append(j)
        print(x_sa, x_dwave, ys)
        plt.plot(x_sa,ys)
        plt.plot(x_dwave,ys)
        
    return result
    
print(run_instances(verbose=False, plot=True))